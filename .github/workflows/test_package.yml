# Test package every time

name: Pytest

# Controls when the action will run.

# Trigger this code when a new release is published
on:
  workflow_dispatch:
  release:
    types: [ created ]
  pull_request:
  push:
    branches:
      - master

jobs:
  update:
    name: "(${{ matrix.os }}, ${{ matrix.python-version }}, ${{ matrix.test }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        os: [ "ubuntu-latest", "windows-latest" ]
        python-version: [ "3.8", "3.9", "3.10" ]
        test: [ 'coveralls', 'pytest', "fail-fast" ]
        exclude:
          - os: windows-latest
            test: coveralls
          - python-version: 3.9
            test: coveralls
          - python-version: "3.10"
            test: coveralls
          - test: "fail-fast"
            os: windows-latest
          - test: "fail-fast"
            python-version: 3.9
          - test: "fail-fast"
            python-version: "3.10"
    steps:
      - name: Setup python
        uses: actions/setup-python@v3.1.2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Make installation linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          bash .github/scripts/install_on_linux.sh
          echo "check that LD_LIBRARY_PATH (/home/runner/work/dddm/dddm/MultiNest/lib) exists and has files"
          ls /home/runner/work/dddm/dddm/MultiNest/lib
      - name: Make installation windows
        if: matrix.os == 'windows-latest'
        run: |
          pip install emcee
          pip install git+https://github.com/jorana/wimprates
          git clone https://github.com/jorana/verne
          pip install -e verne
          git clone https://github.com/JoranAngevaare/DarkELF
          pip install -e DarkELF
      - name: Install other stuff
        run: |
          pip install -r extra_requirements/requirements-tests.txt
          python setup.py develop
      # Do the tests
      - name: Test package (windows)
        if: matrix.os == 'windows-latest' && matrix.test == 'pytest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          coverage run --source=dddm -m pytest -vsx --durations 0
          coverage run --append --source=dddm -m pytest --nbmake -n=auto ./notebooks
          coveralls --service=github
      - name: Test package (linux)
        if: matrix.os == 'ubuntu-latest' && matrix.test == 'pytest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          export LD_LIBRARY_PATH=/home/runner/work/dddm/dddm/MultiNest/lib
          export RUN_TEST_EXTENDED=1
          coverage run --source=dddm -m pytest -vsx --durations 0
          coverage run --append --source=dddm -m pytest --nbmake -n=auto ./notebooks
          coveralls --service=github
      - name: Test package - fail fast (linux)
        if: matrix.os == 'ubuntu-latest' && matrix.test == 'fail-fast'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUMBA_DISABLE_JIT: 1
        run: |
          export LD_LIBRARY_PATH=/home/runner/work/dddm/dddm/MultiNest/lib
          coverage run --source=dddm -m pytest -vsx --durations 0
      - name: Coveralls
        if: matrix.test == 'coveralls'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NUMBA_DISABLE_JIT: 1
        run: |
          export LD_LIBRARY_PATH=/home/runner/work/dddm/dddm/MultiNest/lib
          export RUN_TEST_EXTENDED=1
          coverage run --source=dddm setup.py test -v
          coverage run --append --source=dddm -m pytest --nbmake -n=auto ./notebooks
          coveralls --service=github
      - name: goodbye
        run: echo goodbye
